android.permission.ACCESS_COARSE_LOCATION;<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
android.permission.ACCESS_COARSE_LOCATION;<android.location.LocationManager: void addProximityAlert(android.app.PendingIntent)>
android.permission.ACCESS_COARSE_LOCATION;<android.location.LocationManager: void requestLocationUpdates(android.app.PendingIntent)>
android.permission.ACCESS_COARSE_LOCATION;<android.location.LocationManager: void requestLocationUpdates(android.location.LocationListener)>
android.permission.ACCESS_COARSE_LOCATION;<android.location.LocationManager: void requestLocationUpdates(android.os.Looper)>
android.permission.ACCESS_COARSE_LOCATION;<android.location.LocationManager: void requestSingleUpdate(android.app.PendingIntent)>
android.permission.ACCESS_COARSE_LOCATION;<android.location.LocationManager: void requestSingleUpdate(android.os.Looper)>
android.permission.ACCESS_COARSE_LOCATION;<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
android.permission.ACCESS_COARSE_LOCATION;<android.telephony.TelephonyManager: java.util.List getAllCellInfo()>
android.permission.ACCESS_COARSE_LOCATION;<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>
android.permission.ACCESS_COARSE_LOCATION;<com.google.android.gms.location.FusedLocationProviderApi: android.location.Location getLastLocation(com.google.android.gms.common.api.GoogleApiClient)>
android.permission.ACCESS_COARSE_LOCATION;<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.LocationRequest,android.app.PendingIntent)>
android.permission.ACCESS_COARSE_LOCATION;<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.LocationRequest,com.google.android.gms.location.LocationCallback,android.os.Looper)>
android.permission.ACCESS_COARSE_LOCATION;<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.LocationRequest,com.google.android.gms.location.LocationListener)>
android.permission.ACCESS_COARSE_LOCATION;<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.LocationRequest,com.google.android.gms.location.LocationListener,android.os.Looper)>
android.permission.ACCESS_COARSE_LOCATION;<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult setMockLocation(com.google.android.gms.common.api.GoogleApiClient,android.location.Location)>
android.permission.ACCESS_COARSE_LOCATION;<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult setMockMode(com.google.android.gms.common.api.GoogleApiClient,boolean)>
android.permission.ACCESS_COARSE_LOCATION;<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.location.LocationAvailability getLocationAvailability(com.google.android.gms.common.api.GoogleApiClient)>
android.permission.ACCESS_COARSE_LOCATION;<com.google.android.gms.maps.GoogleMap: void setMyLocationEnabled(boolean)>
android.permission.ACCESS_FINE_LOCATION;<android.hardware.location.GeofenceHardware: boolean addGeofence(android.hardware.location.GeofenceHardwareCallback)>
android.permission.ACCESS_FINE_LOCATION;<android.hardware.location.GeofenceHardware: boolean pauseGeofence(int)>
android.permission.ACCESS_FINE_LOCATION;<android.hardware.location.GeofenceHardware: boolean registerForMonitorStateChangeCallback(android.hardware.location.GeofenceHardwareMonitorCallback)>
android.permission.ACCESS_FINE_LOCATION;<android.hardware.location.GeofenceHardware: boolean removeGeofence(int)>
android.permission.ACCESS_FINE_LOCATION;<android.hardware.location.GeofenceHardware: boolean resumeGeofence(int)>
android.permission.ACCESS_FINE_LOCATION;<android.hardware.location.GeofenceHardware: boolean unregisterForMonitorStateChangeCallback(android.hardware.location.GeofenceHardwareMonitorCallback)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: boolean addNmeaListener(android.os.Handler)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: boolean registerGnssMeasurementsCallback(android.os.Handler)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: boolean registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: boolean registerGnssNavigationMessageCallback(android.os.Handler)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: boolean registerGnssStatusCallback(android.os.Handler)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: boolean registerGnssStatusCallback(android.location.GnssStatus$Callback)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: void addProximityAlert(android.app.PendingIntent)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: void requestLocationUpdates(android.app.PendingIntent)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: void requestLocationUpdates(android.location.LocationListener)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: void requestLocationUpdates(android.os.Looper)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: void requestSingleUpdate(android.app.PendingIntent)>
android.permission.ACCESS_FINE_LOCATION;<android.location.LocationManager: void requestSingleUpdate(android.os.Looper)>
android.permission.ACCESS_FINE_LOCATION;<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.awareness.SnapshotApi: com.google.android.gms.common.api.PendingResult getBeaconState(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.awareness.state.BeaconState$TypeFilter[])>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.awareness.SnapshotApi: com.google.android.gms.common.api.PendingResult getBeaconState(com.google.android.gms.common.api.GoogleApiClient,java.util.Collection)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.awareness.SnapshotApi: com.google.android.gms.common.api.PendingResult getLocation(com.google.android.gms.common.api.GoogleApiClient)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.awareness.SnapshotApi: com.google.android.gms.common.api.PendingResult getPlaces(com.google.android.gms.common.api.GoogleApiClient)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.awareness.SnapshotApi: com.google.android.gms.common.api.PendingResult getWeather(com.google.android.gms.common.api.GoogleApiClient)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.awareness.fence.BeaconFence: com.google.android.gms.awareness.fence.AwarenessFence found(com.google.android.gms.awareness.state.BeaconState$TypeFilter[])>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.awareness.fence.BeaconFence: com.google.android.gms.awareness.fence.AwarenessFence found(java.util.Collection)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.awareness.fence.BeaconFence: com.google.android.gms.awareness.fence.AwarenessFence lost(com.google.android.gms.awareness.state.BeaconState$TypeFilter[])>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.awareness.fence.BeaconFence: com.google.android.gms.awareness.fence.AwarenessFence lost(java.util.Collection)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.awareness.fence.BeaconFence: com.google.android.gms.awareness.fence.AwarenessFence near(com.google.android.gms.awareness.state.BeaconState$TypeFilter[])>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.awareness.fence.BeaconFence: com.google.android.gms.awareness.fence.AwarenessFence near(java.util.Collection)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.awareness.fence.LocationFence: com.google.android.gms.awareness.fence.AwarenessFence entering(double,double,double)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.awareness.fence.LocationFence: com.google.android.gms.awareness.fence.AwarenessFence exiting(double,double,double)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.awareness.fence.LocationFence: com.google.android.gms.awareness.fence.AwarenessFence in(double,double,double,long)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.fitness.HistoryApi: com.google.android.gms.common.api.PendingResult readDailyTotal(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.data.DataType)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.fitness.HistoryApi: com.google.android.gms.common.api.PendingResult readDailyTotalFromLocalDevice(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.data.DataType)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.fitness.HistoryApi: com.google.android.gms.common.api.PendingResult readData(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.DataReadRequest)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.fitness.HistoryApi: com.google.android.gms.common.api.PendingResult registerDataUpdateListener(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.DataUpdateListenerRegistrationRequest)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.fitness.RecordingApi: com.google.android.gms.common.api.PendingResult subscribe(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.data.DataSource)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.fitness.RecordingApi: com.google.android.gms.common.api.PendingResult subscribe(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.data.DataType)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.fitness.SensorsApi: com.google.android.gms.common.api.PendingResult add(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.SensorRequest,android.app.PendingIntent)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.fitness.SensorsApi: com.google.android.gms.common.api.PendingResult add(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.SensorRequest,com.google.android.gms.fitness.request.OnDataPointListener)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.fitness.SensorsApi: com.google.android.gms.common.api.PendingResult findDataSources(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.DataSourcesRequest)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.fitness.SessionsApi: com.google.android.gms.common.api.PendingResult readSession(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.SessionReadRequest)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.location.FusedLocationProviderApi: android.location.Location getLastLocation(com.google.android.gms.common.api.GoogleApiClient)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.LocationRequest,android.app.PendingIntent)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.LocationRequest,com.google.android.gms.location.LocationCallback,android.os.Looper)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.LocationRequest,com.google.android.gms.location.LocationListener)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.LocationRequest,com.google.android.gms.location.LocationListener,android.os.Looper)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult setMockLocation(com.google.android.gms.common.api.GoogleApiClient,android.location.Location)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult setMockMode(com.google.android.gms.common.api.GoogleApiClient,boolean)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.location.LocationAvailability getLocationAvailability(com.google.android.gms.common.api.GoogleApiClient)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.location.GeofencingApi: com.google.android.gms.common.api.PendingResult addGeofences(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.GeofencingRequest,android.app.PendingIntent)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.location.places.PlaceDetectionApi: com.google.android.gms.common.api.PendingResult getCurrentPlace(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.places.PlaceFilter)>
android.permission.ACCESS_FINE_LOCATION;<com.google.android.gms.maps.GoogleMap: void setMyLocationEnabled(boolean)>
android.permission.BODY_SENSORS;<com.google.android.gms.fitness.HistoryApi: com.google.android.gms.common.api.PendingResult readDailyTotal(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.data.DataType)>
android.permission.BODY_SENSORS;<com.google.android.gms.fitness.HistoryApi: com.google.android.gms.common.api.PendingResult readDailyTotalFromLocalDevice(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.data.DataType)>
android.permission.BODY_SENSORS;<com.google.android.gms.fitness.HistoryApi: com.google.android.gms.common.api.PendingResult readData(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.DataReadRequest)>
android.permission.BODY_SENSORS;<com.google.android.gms.fitness.HistoryApi: com.google.android.gms.common.api.PendingResult registerDataUpdateListener(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.DataUpdateListenerRegistrationRequest)>
android.permission.BODY_SENSORS;<com.google.android.gms.fitness.RecordingApi: com.google.android.gms.common.api.PendingResult subscribe(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.data.DataSource)>
android.permission.BODY_SENSORS;<com.google.android.gms.fitness.RecordingApi: com.google.android.gms.common.api.PendingResult subscribe(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.data.DataType)>
android.permission.BODY_SENSORS;<com.google.android.gms.fitness.SensorsApi: com.google.android.gms.common.api.PendingResult add(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.SensorRequest,android.app.PendingIntent)>
android.permission.BODY_SENSORS;<com.google.android.gms.fitness.SensorsApi: com.google.android.gms.common.api.PendingResult add(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.SensorRequest,com.google.android.gms.fitness.request.OnDataPointListener)>
android.permission.BODY_SENSORS;<com.google.android.gms.fitness.SensorsApi: com.google.android.gms.common.api.PendingResult findDataSources(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.DataSourcesRequest)>
android.permission.BODY_SENSORS;<com.google.android.gms.fitness.SessionsApi: com.google.android.gms.common.api.PendingResult readSession(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.SessionReadRequest)>
android.permission.CALL_PHONE;<android.telecom.TelecomManager: void placeCall(android.os.Bundle)>
android.permission.CAMERA;<android.hardware.Camera: android.hardware.Camera open()>
android.permission.CAMERA;<android.hardware.Camera: android.hardware.Camera open(int)>
android.permission.CAMERA;<android.hardware.camera2.CameraManager: void openCamera(android.os.Handler)>
android.permission.CAMERA;<com.google.android.gms.vision.CameraSource: com.google.android.gms.vision.CameraSource start()>
android.permission.CAMERA;<com.google.android.gms.vision.CameraSource: com.google.android.gms.vision.CameraSource start(android.view.SurfaceHolder)>
android.permission.GET_ACCOUNTS;<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(android.os.Handler)>
android.permission.GET_ACCOUNTS;<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.os.Handler)>
android.permission.GET_ACCOUNTS;<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>
android.permission.GET_ACCOUNTS;<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>
android.permission.GET_ACCOUNTS;<android.accounts.AccountManager: void addOnAccountsUpdatedListener(boolean)>
android.permission.GET_ACCOUNTS;<com.google.android.gms.games.Games: java.lang.String getCurrentAccountName(com.google.android.gms.common.api.GoogleApiClient)>
android.permission.READ_CONTACTS;<android.provider.ContactsContract$Contacts: android.net.Uri lookupContact(android.net.Uri)>
android.permission.READ_CONTACTS;<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)>
android.permission.READ_PHONE_STATE;<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getDefaultOutgoingPhoneAccount(java.lang.String)>
android.permission.READ_PHONE_STATE;<android.telecom.TelecomManager: boolean isInCall()>
android.permission.READ_PHONE_STATE;<android.telecom.TelecomManager: boolean isVoiceMailNumber(java.lang.String)>
android.permission.READ_PHONE_STATE;<android.telecom.TelecomManager: java.lang.String getLine1Number(android.telecom.PhoneAccountHandle)>
android.permission.READ_PHONE_STATE;<android.telecom.TelecomManager: java.lang.String getVoiceMailNumber(android.telecom.PhoneAccountHandle)>
android.permission.READ_PHONE_STATE;<android.telecom.TelecomManager: java.util.List getCallCapablePhoneAccounts()>
android.permission.READ_PHONE_STATE;<android.telecom.TelecomManager: void showInCallScreen(boolean)>
android.permission.READ_PHONE_STATE;<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfig()>
android.permission.READ_PHONE_STATE;<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>
android.permission.READ_PHONE_STATE;<android.telephony.PhoneNumberUtils: boolean isVoiceMailNumber(java.lang.String)>
android.permission.READ_PHONE_STATE;<android.telephony.PhoneStateListener: void onCallStateChanged(java.lang.String)>
android.permission.READ_PHONE_STATE;<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int)>
android.permission.READ_PHONE_STATE;<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int)>
android.permission.READ_PHONE_STATE;<android.telephony.SubscriptionManager: android.telephony.SubscriptionManager from(android.content.Context)>
android.permission.READ_PHONE_STATE;<android.telephony.SubscriptionManager: boolean isNetworkRoaming(int)>
android.permission.READ_PHONE_STATE;<android.telephony.SubscriptionManager: int getActiveSubscriptionInfoCount()>
android.permission.READ_PHONE_STATE;<android.telephony.SubscriptionManager: int getActiveSubscriptionInfoCountMax()>
android.permission.READ_PHONE_STATE;<android.telephony.SubscriptionManager: java.util.List getActiveSubscriptionInfoList()>
android.permission.READ_PHONE_STATE;<android.telephony.SubscriptionManager: void addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager$OnSubscriptionsChangedListener)>
android.permission.READ_PHONE_STATE;<android.telephony.SubscriptionManager: void removeOnSubscriptionsChangedListener(android.telephony.SubscriptionManager$OnSubscriptionsChangedListener)>
android.permission.READ_PHONE_STATE;<android.telephony.TelephonyManager: java.lang.String getDeviceId()>
android.permission.READ_PHONE_STATE;<android.telephony.TelephonyManager: java.lang.String getDeviceId(int)>
android.permission.READ_PHONE_STATE;<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>
android.permission.READ_PHONE_STATE;<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1()>
android.permission.READ_PHONE_STATE;<android.telephony.TelephonyManager: java.lang.String getLine1Number()>
android.permission.READ_PHONE_STATE;<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>
android.permission.READ_PHONE_STATE;<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>
android.permission.READ_PHONE_STATE;<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>
android.permission.READ_PHONE_STATE;<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>
android.permission.READ_SMS;<android.telephony.TelephonyManager: java.lang.String getLine1Number()>
android.permission.RECORD_AUDIO;<android.media.AudioRecord: void <init>(int)>
android.permission.RECORD_AUDIO;<android.media.MediaRecorder: void setAudioSource(int)>
android.permission.RECORD_AUDIO;<android.media.audiofx.Visualizer: void <init>(int)>
android.permission.RECORD_AUDIO;<android.net.rtp.AudioGroup: void <init>()>
android.permission.RECORD_AUDIO;<android.net.sip.SipAudioCall: void startAudio()>
android.permission.RECORD_AUDIO;<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.ComponentName)>
android.permission.RECORD_AUDIO;<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context)>
android.permission.SEND_SMS;<android.telephony.SmsManager: void sendDataMessage(android.app.PendingIntent)>
android.permission.SEND_SMS;<android.telephony.SmsManager: void sendMultipartTextMessage(java.util.ArrayList)>
android.permission.SEND_SMS;<android.telephony.SmsManager: void sendTextMessage(android.app.PendingIntent)>
android.permission.USE_SIP;<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(int)>
android.permission.USE_SIP;<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.net.sip.SipAudioCall$Listener)>
android.permission.USE_SIP;<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipSession$Listener)>
android.permission.USE_SIP;<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)>
android.permission.USE_SIP;<android.net.sip.SipManager: void open(android.net.sip.SipRegistrationListener)>
android.permission.USE_SIP;<android.net.sip.SipManager: void open(android.net.sip.SipProfile)>
android.permission.USE_SIP;<android.net.sip.SipManager: void register(android.net.sip.SipRegistrationListener)>
android.permission.WRITE_CONTACTS;<android.provider.ContactsContract$Contacts: android.net.Uri lookupContact(android.net.Uri)>
android.permission.WRITE_CONTACTS;<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(java.lang.String)>
android.permission.WRITE_CONTACTS;<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(java.lang.String)>