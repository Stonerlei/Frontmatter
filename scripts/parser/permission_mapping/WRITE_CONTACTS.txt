<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.content.ContentResolver: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)>
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)>
<android.provider.ContactsContract$PinnedPositions: void pin(android.content.ContentResolver,long,int)>
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.android.providers.contacts.ContactsProvider2$PipeMonitor: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.providers.contacts.ContactsProvider2: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: android.content.res.AssetFileDescriptor openAssetFileInner(android.net.Uri,java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: android.content.res.AssetFileDescriptor openAssetFileLocal(android.net.Uri,java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long,android.os.CancellationSignal)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryWithContactIdAndLookupKey(android.database.sqlite.SQLiteQueryBuilder,android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,java.lang.String,java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryWithContactIdAndLookupKey(android.database.sqlite.SQLiteQueryBuilder,android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<com.android.providers.contacts.ContactsProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues)>
<com.android.providers.contacts.ContactsProvider2: boolean importLegacyContacts(com.android.providers.contacts.LegacyContactImporter)>
<com.android.providers.contacts.ContactsProvider2: int deleteData(java.lang.String,java.lang.String[],boolean)>
<com.android.providers.contacts.ContactsProvider2: int deleteData(long,java.lang.String[])>
<com.android.providers.contacts.ContactsProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[])>
<com.android.providers.contacts.ContactsProvider2: int updateData(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)>
<com.android.providers.contacts.ContactsProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)>
<com.android.providers.contacts.ContactsProvider2: long insertSettings(android.net.Uri,android.content.ContentValues)>
<com.android.providers.contacts.ContactsProvider2: long insertStatusUpdate(android.content.ContentValues)>
<com.android.providers.contacts.ContactsProvider2: void cleanupPhotoStore()>
<com.android.providers.contacts.ContactsProvider2: void importLegacyContactsInBackground()>
<com.android.providers.contacts.ContactsProvider2: void outputRawContactsAsVCard(android.net.Uri,java.io.OutputStream,java.lang.String,java.lang.String[])>
<com.android.providers.contacts.ContactsProvider2: void performBackgroundTask(int,java.lang.Object)>
