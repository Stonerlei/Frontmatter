# api
<android.hardware.location.GeofenceHardware: boolean addGeofence(int,int,android.hardware.location.GeofenceHardwareRequest,android.hardware.location.GeofenceHardwareCallback)>
<android.hardware.location.GeofenceHardware: boolean addGeofence(int,int,android.hardware.location.GeofenceHardwareRequest,android.hardware.location.GeofenceHardwareCallback)>
<android.hardware.location.GeofenceHardware: boolean pauseGeofence(int,int)>
<android.hardware.location.GeofenceHardware: boolean pauseGeofence(int,int)>
<android.hardware.location.GeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)>
<android.hardware.location.GeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)>
<android.hardware.location.GeofenceHardware: boolean removeGeofence(int,int)>
<android.hardware.location.GeofenceHardware: boolean resumeGeofence(int,int,int)>
<android.hardware.location.GeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)>
<android.hardware.location.GeofenceHardwareImpl: int getAllowedResolutionLevel(int,int)>
<android.hardware.location.GeofenceHardwareService$1: boolean addCircularFence(int,android.hardware.location.GeofenceHardwareRequestParcelable,android.hardware.location.IGeofenceHardwareCallback)>
<android.hardware.location.GeofenceHardwareService$1: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)>
<android.hardware.location.GeofenceHardwareService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.hardware.location.GeofenceHardwareService$1: boolean pauseGeofence(int,int)>
<android.hardware.location.GeofenceHardwareService$1: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>
<android.hardware.location.GeofenceHardwareService$1: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>
<android.hardware.location.GeofenceHardwareService: void access$200(android.hardware.location.GeofenceHardwareService,int,int,int)>
<android.hardware.location.GeofenceHardwareService: void checkPermission(int,int,int)>
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean addCircularFence(int,android.hardware.location.GeofenceHardwareRequestParcelable,android.hardware.location.IGeofenceHardwareCallback)>
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)>
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean pauseGeofence(int,int)>
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>
<android.hardware.location.IGeofenceHardware$Stub: boolean addCircularFence(int,android.hardware.location.GeofenceHardwareRequestParcelable,android.hardware.location.IGeofenceHardwareCallback)>
<android.hardware.location.IGeofenceHardware$Stub: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)>
<android.hardware.location.IGeofenceHardware$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.hardware.location.IGeofenceHardware$Stub: boolean pauseGeofence(int,int)>
<android.hardware.location.IGeofenceHardware$Stub: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>
<android.hardware.location.IGeofenceHardware$Stub: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>
<android.hardware.location.IGeofenceHardware: boolean addCircularFence(int,android.hardware.location.GeofenceHardwareRequestParcelable,android.hardware.location.IGeofenceHardwareCallback)>
<android.hardware.location.IGeofenceHardware: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)>
<android.hardware.location.IGeofenceHardware: boolean pauseGeofence(int,int)>
<android.hardware.location.IGeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>
<android.hardware.location.IGeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)>
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastKnownLocation(java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastKnownLocation(java.lang.String,java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: android.os.Bundle getProviderInfo(java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: boolean addGpsMeasurementsListener(android.location.IGpsMeasurementsListener,java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: boolean addGpsNavigationMessageListener(android.location.IGpsNavigationMessageListener,java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener)>
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.ILocationManager$Stub$Proxy: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.ILocationManager$Stub$Proxy: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<android.location.ILocationManager$Stub$Proxy: void addProximityAlert(double,double,float,long,android.app.PendingIntent,java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)>
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener,java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)>
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent,java.lang.String)>
<android.location.ILocationManager$Stub: android.location.Location getLastKnownLocation(java.lang.String)>
<android.location.ILocationManager$Stub: android.location.Location getLastKnownLocation(java.lang.String,java.lang.String)>
<android.location.ILocationManager$Stub: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>
<android.location.ILocationManager$Stub: android.os.Bundle getProviderInfo(java.lang.String)>
<android.location.ILocationManager$Stub: boolean addGpsMeasurementsListener(android.location.IGpsMeasurementsListener,java.lang.String)>
<android.location.ILocationManager$Stub: boolean addGpsNavigationMessageListener(android.location.IGpsNavigationMessageListener,java.lang.String)>
<android.location.ILocationManager$Stub: boolean addGpsStatusListener(android.location.IGpsStatusListener)>
<android.location.ILocationManager$Stub: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)>
<android.location.ILocationManager$Stub: boolean isProviderEnabled(java.lang.String)>
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.location.ILocationManager$Stub: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.ILocationManager$Stub: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>
<android.location.ILocationManager$Stub: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.ILocationManager$Stub: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.ILocationManager$Stub: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<android.location.ILocationManager$Stub: void addProximityAlert(double,double,float,long,android.app.PendingIntent,java.lang.String)>
<android.location.ILocationManager$Stub: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)>
<android.location.ILocationManager$Stub: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>
<android.location.ILocationManager$Stub: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)>
<android.location.ILocationManager$Stub: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener,java.lang.String)>
<android.location.ILocationManager$Stub: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)>
<android.location.ILocationManager$Stub: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent,java.lang.String)>
<android.location.ILocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
<android.location.ILocationManager: android.location.Location getLastKnownLocation(java.lang.String,java.lang.String)>
<android.location.ILocationManager: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>
<android.location.ILocationManager: android.os.Bundle getProviderInfo(java.lang.String)>
<android.location.ILocationManager: boolean addGpsMeasurementsListener(android.location.IGpsMeasurementsListener,java.lang.String)>
<android.location.ILocationManager: boolean addGpsNavigationMessageListener(android.location.IGpsNavigationMessageListener,java.lang.String)>
<android.location.ILocationManager: boolean addGpsStatusListener(android.location.IGpsStatusListener)>
<android.location.ILocationManager: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)>
<android.location.ILocationManager: boolean isProviderEnabled(java.lang.String)>
<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.ILocationManager: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>
<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.ILocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<android.location.ILocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent,java.lang.String)>
<android.location.ILocationManager: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)>
<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>
<android.location.ILocationManager: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)>
<android.location.ILocationManager: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener,java.lang.String)>
<android.location.ILocationManager: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)>
<android.location.ILocationManager: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent,java.lang.String)>
<android.location.LocalListenerHelper: boolean add(java.lang.Object)>
<android.location.LocalListenerHelper: boolean registerWithServer()>
<android.location.Location: double getLatitude()>
<android.location.Location: double getLongitude()>
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)>
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
<android.location.LocationManager: android.location.Location getLastLocation()>
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
<android.location.LocationManager: boolean addGpsMeasurementListener(android.location.GpsMeasurementsEvent$Listener)>
<android.location.LocationManager: boolean addGpsNavigationMessageListener(android.location.GpsNavigationMessageEvent$Listener)>
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)>
<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener)>
<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)>
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
<android.location.LocationManager: boolean registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback)>
<android.location.LocationManager: boolean registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback,android.os.Handler)>
<android.location.LocationManager: boolean registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback,android.os.Handler)>
<android.location.LocationManager: boolean registerGnssStatusCallback(android.location.GnssStatus$Callback)>
<android.location.LocationManager: boolean registerGnssStatusCallback(android.location.GnssStatus$Callback,android.os.Handler)>
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.LocationManager: java.util.List getProviders(boolean)>
<android.location.LocationManager: void _requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)>
<android.location.LocationManager: void _requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)>
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
<android.webkit.GeolocationService: void registerForLocationUpdates()>
<android.webkit.GeolocationService: void setEnableGps(boolean)>
<android.webkit.GeolocationService: void unregisterFromLocationUpdates()>
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)>
<com.android.internal.location.ILocationProvider$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()>
<com.android.internal.telephony.ITelephony$Stub: android.os.Bundle getCellLocation()>
<com.android.internal.telephony.ITelephony: android.os.Bundle getCellLocation()>
<com.android.location.fused.FusedLocationService: android.os.IBinder onBind(android.content.Intent)>
<com.android.location.fused.FusedLocationService: boolean onUnbind(android.content.Intent)>
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()>
<com.android.server.LocationManagerService$2: void onChange(boolean)>
<com.android.server.LocationManagerService$3: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String)>
<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>
<com.android.server.LocationManagerService: android.location.Location _getLastKnownLocationLocked(java.lang.String)>
<com.android.server.LocationManagerService: android.location.Location _getLastKnownLocationLocked(java.lang.String,java.lang.String)>
<com.android.server.LocationManagerService: android.location.Location getLastKnownLocation(java.lang.String)>
<com.android.server.LocationManagerService: android.location.Location getLastKnownLocation(java.lang.String,java.lang.String)>
<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>
<com.android.server.LocationManagerService: android.os.Bundle _getProviderInfoLocked(java.lang.String)>
<com.android.server.LocationManagerService: android.os.Bundle getProviderInfo(java.lang.String)>
<com.android.server.LocationManagerService: boolean _isProviderEnabledLocked(java.lang.String)>
<com.android.server.LocationManagerService: boolean addGpsMeasurementsListener(android.location.IGpsMeasurementsListener,java.lang.String)>
<com.android.server.LocationManagerService: boolean addGpsNavigationMessageListener(android.location.IGpsNavigationMessageListener,java.lang.String)>
<com.android.server.LocationManagerService: boolean addGpsStatusListener(android.location.IGpsStatusListener)>
<com.android.server.LocationManagerService: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)>
<com.android.server.LocationManagerService: boolean isAllowedProviderSafe(java.lang.String)>
<com.android.server.LocationManagerService: boolean isProviderEnabled(java.lang.String)>
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String)>
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,int,int,java.lang.String)>
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,int,int,java.lang.String)>
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,int,int,java.lang.String,android.os.WorkSource,boolean)>
<com.android.server.LocationManagerService: int access$400(com.android.server.LocationManagerService,int,int)>
<com.android.server.LocationManagerService: int access$500(com.android.server.LocationManagerService,int,int)>
<com.android.server.LocationManagerService: int access$600(com.android.server.LocationManagerService,int,int)>
<com.android.server.LocationManagerService: int getAllowedResolutionLevel(int,int)>
<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>
<com.android.server.LocationManagerService: java.lang.String checkPermissionsSafe(java.lang.String,java.lang.String)>
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<com.android.server.LocationManagerService: java.util.List _getProvidersLocked(android.location.Criteria,boolean)>
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)>
<com.android.server.LocationManagerService: void access$200(com.android.server.LocationManagerService)>
<com.android.server.LocationManagerService: void access$300(com.android.server.LocationManagerService,int)>
<com.android.server.LocationManagerService: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<com.android.server.LocationManagerService: void addProximityAlert(double,double,float,long,android.app.PendingIntent,java.lang.String)>
<com.android.server.LocationManagerService: void addProximityAlertLocked(double,double,float,long,android.app.PendingIntent)>
<com.android.server.LocationManagerService: void addProximityAlertLocked(double,double,float,long,android.app.PendingIntent,java.lang.String)>
<com.android.server.LocationManagerService: void checkPermissionsSafe(java.lang.String)>
<com.android.server.LocationManagerService: void loadProvidersLocked()>
<com.android.server.LocationManagerService: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)>
<com.android.server.LocationManagerService: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>
<com.android.server.LocationManagerService: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)>
<com.android.server.LocationManagerService: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener,java.lang.String)>
<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(java.lang.String,long,float,boolean,com.android.server.LocationManagerService$Receiver)>
<com.android.server.LocationManagerService: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)>
<com.android.server.LocationManagerService: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent,java.lang.String)>
<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean,int)>
<com.android.server.LocationManagerService: void updateProvidersLocked()>
<com.android.server.TwilightService$LocationHandler: void enableLocationUpdates()>
<com.android.server.TwilightService$LocationHandler: void requestLocationUpdate()>
<com.android.server.TwilightService$LocationHandler: void retrieveLocation()>
<com.android.server.UiModeManagerService$8: void retrieveLocation()>
<com.android.server.location.ComprehensiveCountryDetector$1: void onCountryDetected(android.location.Country)>
<com.android.server.location.ComprehensiveCountryDetector: void access$200(com.android.server.location.ComprehensiveCountryDetector)>
<com.android.server.location.ComprehensiveCountryDetector: void runAfterDetection(android.location.Country,android.location.Country,boolean,boolean)>
<com.android.server.location.ComprehensiveCountryDetector: void setCountryListener(android.location.CountryListener)>
<com.android.server.location.ComprehensiveCountryDetector: void startLocationBasedDetector(android.location.CountryListener)>
<com.android.server.location.ComprehensiveCountryDetector: void stopLocationBasedDetector()>
<com.android.server.location.CountryDetectorBase: android.location.Country detectCountry()>
<com.android.server.location.CountryDetectorBase: void setCountryListener(android.location.CountryListener)>
<com.android.server.location.FlpHardwareProvider: com.android.server.location.FlpHardwareProvider getInstance(android.content.Context)>
<com.android.server.location.FlpHardwareProvider: void <init>(android.content.Context)>
<com.android.server.location.GeofenceManager: android.location.Location getFreshLocationLocked()>
<com.android.server.location.GeofenceManager: void access$000(com.android.server.location.GeofenceManager)>
<com.android.server.location.GeofenceManager: void addFence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,int,int,java.lang.String)>
<com.android.server.location.GeofenceManager: void onLocationChanged(android.location.Location)>
<com.android.server.location.GeofenceManager: void scheduleUpdateFencesLocked()>
<com.android.server.location.GeofenceManager: void sendIntent(android.app.PendingIntent,android.content.Intent)>
<com.android.server.location.GeofenceManager: void sendIntentEnter(android.app.PendingIntent)>
<com.android.server.location.GeofenceManager: void sendIntentExit(android.app.PendingIntent)>
<com.android.server.location.GeofenceManager: void updateFences()>
<com.android.server.location.GpsLocationProvider: void requestRefLocation(int)>
<com.android.server.location.LocationBasedCountryDetector$1: void onLocationChanged(android.location.Location)>
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()>
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()>
<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()>
<com.android.server.location.LocationBasedCountryDetector: void registerListener(java.lang.String,android.location.LocationListener)>
<com.android.server.location.LocationBasedCountryDetector: void setCountryListener(android.location.CountryListener)>
<com.android.server.location.LocationBasedCountryDetector: void stop()>
<com.android.server.location.LocationBasedCountryDetector: void unregisterListener(android.location.LocationListener)>
<com.android.server.twilight.TwilightService$LocationHandler: void enableLocationUpdates()>
<com.android.server.twilight.TwilightService$LocationHandler: void requestLocationUpdate()>
<com.android.server.twilight.TwilightService$LocationHandler: void retrieveLocation()>
<com.android.wallpaper.grass.GrassRS: void updateLocation()>
<com.cooliris.media.ReverseGeocoder: java.lang.String computeMostGranularCommonLocation(com.cooliris.media.MediaSet)>
<com.google.android.gms.awareness.SnapshotApi: com.google.android.gms.common.api.PendingResult getBeaconState(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.awareness.state.BeaconState$TypeFilter[])>
<com.google.android.gms.awareness.SnapshotApi: com.google.android.gms.common.api.PendingResult getBeaconState(com.google.android.gms.common.api.GoogleApiClient,java.util.Collection)>
<com.google.android.gms.awareness.SnapshotApi: com.google.android.gms.common.api.PendingResult getLocation(com.google.android.gms.common.api.GoogleApiClient)>
<com.google.android.gms.awareness.SnapshotApi: com.google.android.gms.common.api.PendingResult getPlaces(com.google.android.gms.common.api.GoogleApiClient)>
<com.google.android.gms.awareness.SnapshotApi: com.google.android.gms.common.api.PendingResult getWeather(com.google.android.gms.common.api.GoogleApiClient)>
<com.google.android.gms.awareness.fence.BeaconFence: com.google.android.gms.awareness.fence.AwarenessFence found(com.google.android.gms.awareness.state.BeaconState$TypeFilter[])>
<com.google.android.gms.awareness.fence.BeaconFence: com.google.android.gms.awareness.fence.AwarenessFence found(java.util.Collection)>
<com.google.android.gms.awareness.fence.BeaconFence: com.google.android.gms.awareness.fence.AwarenessFence lost(com.google.android.gms.awareness.state.BeaconState$TypeFilter[])>
<com.google.android.gms.awareness.fence.BeaconFence: com.google.android.gms.awareness.fence.AwarenessFence lost(java.util.Collection)>
<com.google.android.gms.awareness.fence.BeaconFence: com.google.android.gms.awareness.fence.AwarenessFence near(com.google.android.gms.awareness.state.BeaconState$TypeFilter[])>
<com.google.android.gms.awareness.fence.BeaconFence: com.google.android.gms.awareness.fence.AwarenessFence near(java.util.Collection)>
<com.google.android.gms.awareness.fence.LocationFence: com.google.android.gms.awareness.fence.AwarenessFence entering(double,double,double)>
<com.google.android.gms.awareness.fence.LocationFence: com.google.android.gms.awareness.fence.AwarenessFence exiting(double,double,double)>
<com.google.android.gms.awareness.fence.LocationFence: com.google.android.gms.awareness.fence.AwarenessFence in(double,double,double,long)>
<com.google.android.gms.fitness.HistoryApi: com.google.android.gms.common.api.PendingResult readDailyTotal(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.data.DataType)>
<com.google.android.gms.fitness.HistoryApi: com.google.android.gms.common.api.PendingResult readDailyTotalFromLocalDevice(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.data.DataType)>
<com.google.android.gms.fitness.HistoryApi: com.google.android.gms.common.api.PendingResult readData(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.DataReadRequest)>
<com.google.android.gms.fitness.HistoryApi: com.google.android.gms.common.api.PendingResult registerDataUpdateListener(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.DataUpdateListenerRegistrationRequest)>
<com.google.android.gms.fitness.RecordingApi: com.google.android.gms.common.api.PendingResult subscribe(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.data.DataSource)>
<com.google.android.gms.fitness.RecordingApi: com.google.android.gms.common.api.PendingResult subscribe(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.data.DataType)>
<com.google.android.gms.fitness.SensorsApi: com.google.android.gms.common.api.PendingResult add(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.SensorRequest,android.app.PendingIntent)>
<com.google.android.gms.fitness.SensorsApi: com.google.android.gms.common.api.PendingResult add(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.SensorRequest,com.google.android.gms.fitness.request.OnDataPointListener)>
<com.google.android.gms.fitness.SensorsApi: com.google.android.gms.common.api.PendingResult findDataSources(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.DataSourcesRequest)>
<com.google.android.gms.fitness.SessionsApi: com.google.android.gms.common.api.PendingResult readSession(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.fitness.request.SessionReadRequest)>
<com.google.android.gms.location.FusedLocationProviderApi: android.location.Location getLastLocation(com.google.android.gms.common.api.GoogleApiClient)>
<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.LocationRequest,android.app.PendingIntent)>
<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.LocationRequest,com.google.android.gms.location.LocationCallback,android.os.Looper)>
<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.LocationRequest,com.google.android.gms.location.LocationListener)>
<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult requestLocationUpdates(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.LocationRequest,com.google.android.gms.location.LocationListener,android.os.Looper)>
<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult setMockLocation(com.google.android.gms.common.api.GoogleApiClient,android.location.Location)>
<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.common.api.PendingResult setMockMode(com.google.android.gms.common.api.GoogleApiClient,boolean)>
<com.google.android.gms.location.FusedLocationProviderApi: com.google.android.gms.location.LocationAvailability getLocationAvailability(com.google.android.gms.common.api.GoogleApiClient)>
<com.google.android.gms.location.GeofencingApi: com.google.android.gms.common.api.PendingResult addGeofences(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.GeofencingRequest,android.app.PendingIntent)>
<com.google.android.gms.location.places.PlaceDetectionApi: com.google.android.gms.common.api.PendingResult getCurrentPlace(com.google.android.gms.common.api.GoogleApiClient,com.google.android.gms.location.places.PlaceFilter)>
<com.google.android.gms.maps.GoogleMap: void setMyLocationEnabled(boolean)>
<android.net.wifi.WifiManager: java.util.List getScanResults()>
<android.net.wifi.WifiManager: void addSuggestionConnectionStatusListener(java.util.concurrent.Executor,android.net.wifi.WifiManager$SuggestionConnectionStatusListener)>
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>
# actions and uris
<android.net.wifi.WifiManager: java.lang.String SCAN_RESULTS_AVAILABLE_ACTION>
<android.net.wifi.WifiManager: java.lang.String ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION>
android.net.wifi.SCAN_RESULTS
<android.telephony.PhoneStateListener: int LISTEN_CELL_INFO>
<android.telephony.PhoneStateListener: int LISTEN_CELL_LOCATION>
# TODO: fix fitness fields
<com.google.android.gms.fitness.data.DataType: com.google.android.gms.fitness.data.DataType AGGREGATE_HEART_RATE_SUMMARY>
#<com.google.android.gms.fitness.data.DataType: TYPE_DISTANCE_CUMULATIVE>
#<com.google.android.gms.fitness.data.DataType: TYPE_DISTANCE_DELTA>
#<com.google.android.gms.fitness.data.DataType: TYPE_LOCATION_SAMPLE>
#<com.google.android.gms.fitness.data.DataType: TYPE_LOCATION_TRACK>
#<com.google.android.gms.fitness.data.DataType: TYPE_SPEED>
# missing wifi calls