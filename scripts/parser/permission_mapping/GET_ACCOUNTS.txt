# api
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccountAsUser(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture copyAccountToUser(android.accounts.Account,android.os.UserHandle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccountAsUser(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccountAsUser(android.accounts.Account,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture renameAccount(android.accounts.Account,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsAsUser(int)>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String,android.os.UserHandle)>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)>
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)>
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(int)>
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)>
<android.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.accounts.AccountManagerService: void checkReadAccountsPermission()>
<android.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])>
<android.accounts.AccountManagerService: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])>
<android.accounts.ChooseTypeAndAccountActivity: java.util.ArrayList getAcceptableAccountChoices(android.accounts.AccountManager)>
<android.accounts.ChooseTypeAndAccountActivity: void onCreate(android.os.Bundle)>
<android.accounts.ChooseTypeAndAccountActivity: void onResume()>
<android.accounts.ChooseTypeAndAccountActivity: void run(android.accounts.AccountManagerFuture)>
<android.accounts.ChooseTypeAndAccountActivity: void runAddAccountForAuthenticator(java.lang.String)>
<android.accounts.GrantCredentialsPermissionActivity: void onCreate(android.os.Bundle)>
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)>
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)>
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)>
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)>
<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])>
<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])>
<android.accounts.IAccountManager$Stub: android.accounts.Account[] getAccounts(java.lang.String)>
<android.accounts.IAccountManager$Stub: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)>
<android.accounts.IAccountManager$Stub: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)>
<android.accounts.IAccountManager$Stub: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)>
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.accounts.IAccountManager$Stub: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])>
<android.accounts.IAccountManager$Stub: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
<android.accounts.IAccountManager$Stub: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])>
<android.accounts.IAccountManager: android.accounts.Account[] getAccounts(java.lang.String)>
<android.accounts.IAccountManager: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)>
<android.accounts.IAccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)>
<android.accounts.IAccountManager: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)>
<android.accounts.IAccountManager: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])>
<android.accounts.IAccountManager: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
<android.accounts.IAccountManager: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])>
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onResult(android.os.Bundle)>
<com.android.browser.DeviceAccountLogin: void handleLogin(java.lang.String,java.lang.String,java.lang.String)>
<com.android.browser.DeviceAccountLogin: void login(int,com.android.browser.DeviceAccountLogin$AutoLoginCallback)>
<com.android.browser.GoogleAccountLogin: android.accounts.Account[] getAccounts(android.content.Context)>
<com.android.server.accounts.AccountManagerService$10: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.accounts.AccountManagerService$11: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.accounts.AccountManagerService$2: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.accounts.AccountManagerService$3: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.accounts.AccountManagerService$4: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.accounts.AccountManagerService$5: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.accounts.AccountManagerService$6: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.accounts.AccountManagerService$7: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.accounts.AccountManagerService$8: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.accounts.AccountManagerService$9: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.accounts.AccountManagerService$RemoveAccountSession: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.accounts.AccountManagerService$Session: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.accounts.AccountManagerService$TestFeaturesSession: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccounts(int)>
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)>
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)>
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String,int)>
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)>
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)>
<com.android.server.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.server.accounts.AccountManagerService: void checkReadAccountsPermission()>
<com.android.server.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])>
<com.android.server.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
<com.android.server.accounts.AccountManagerService: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])>
<com.android.server.accounts.AccountManagerService: void onUserStarted(android.content.Intent)>
<com.android.settings.accounts.AccountPreferenceBase: void onResume()>
<com.android.settings.accounts.AccountPreferenceBase: void onStart()>
<com.android.settings.accounts.AccountSyncSettings$1: void onClick(android.content.DialogInterface,int)>
<com.android.settings.accounts.AccountSyncSettings: void onResume()>
<com.android.settings.accounts.AddAccountSettings: void addAccount(java.lang.String)>
<com.android.settings.accounts.AddAccountSettings: void onActivityResult(int,int,android.content.Intent)>
<com.android.settings.accounts.AuthenticatorHelper: void onAccountsUpdated(android.content.Context,android.accounts.Account[])>
