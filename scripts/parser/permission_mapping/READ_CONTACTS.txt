# api
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)>
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)>
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<com.android.contacts.AttachImage: void onActivityResult(int,int,android.content.Intent)>
<com.android.contacts.ContactLoader$LoadContactTask: android.net.Uri ensureIsContactUri(android.content.ContentResolver,android.net.Uri)>
<com.android.contacts.ContactLoader$LoadContactTask: com.android.contacts.ContactLoader$Result doInBackground(java.lang.Void[])>
<com.android.contacts.ContactLoader$LoadContactTask: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.contacts.ContactLoader$LoadContactTask: void loadDirectoryMetaData(com.android.contacts.ContactLoader$Result)>
<com.android.contacts.ContactLoader$LoadContactTask: void loadGroupMetaData(com.android.contacts.ContactLoader$Result)>
<com.android.contacts.ContactLoader$LoadContactTask: void loadInvitableAccountTypes(com.android.contacts.ContactLoader$Result)>
<com.android.contacts.ContactLoader$LoadContactTask: void loadStreamItems(com.android.contacts.ContactLoader$Result)>
<com.android.contacts.ContactLoader: com.android.contacts.ContactLoader$Result loadInBackground()>
<com.android.contacts.ContactLoader: java.lang.Object loadInBackground()>
<com.android.contacts.ContactLoader: void loadDirectoryMetaData(com.android.contacts.ContactLoader$Result)>
<com.android.contacts.ContactLoader: void loadGroupMetaData(com.android.contacts.ContactLoader$Result)>
<com.android.contacts.ContactLoader: void loadInvitableAccountTypes(com.android.contacts.ContactLoader$Result)>
<com.android.contacts.ContactLoader: void loadStreamItems(com.android.contacts.ContactLoader$Result)>
<com.android.contacts.ContactPhotoLoader$LoaderThread: void loadPhotosFromDatabase()>
<com.android.contacts.ContactPhotoManagerImpl$LoaderThread: void loadPhotosFromDatabase(boolean)>
<com.android.contacts.ContactPhotoManagerImpl$LoaderThread: void loadPhotosInBackground()>
<com.android.contacts.ContactPhotoManagerImpl$LoaderThread: void loadThumbnails(boolean)>
<com.android.contacts.ContactPhotoManagerImpl$LoaderThread: void preloadPhotosInBackground()>
<com.android.contacts.ContactPhotoManagerImpl$LoaderThread: void queryPhotosForPreload()>
<com.android.contacts.ContactSaveService$Listener: void onServiceCompleted(android.content.Intent)>
<com.android.contacts.ContactSaveService: void addMembersToGroup(android.content.ContentResolver,long[],long)>
<com.android.contacts.ContactSaveService: void buildJoinContactDiff(java.util.ArrayList,long,long)>
<com.android.contacts.ContactSaveService: void clearPrimary(android.content.Intent)>
<com.android.contacts.ContactSaveService: void createGroup(android.content.Intent)>
<com.android.contacts.ContactSaveService: void createRawContact(android.content.Intent)>
<com.android.contacts.ContactSaveService: void deleteGroup(android.content.Intent)>
<com.android.contacts.ContactSaveService: void deliverCallbackOnUiThread(android.content.Intent)>
<com.android.contacts.ContactSaveService: void joinContacts(android.content.Intent)>
<com.android.contacts.ContactSaveService: void onHandleIntent(android.content.Intent)>
<com.android.contacts.ContactSaveService: void removeMembersFromGroup(android.content.ContentResolver,long[],long)>
<com.android.contacts.ContactSaveService: void renameGroup(android.content.Intent)>
<com.android.contacts.ContactSaveService: void saveContact(android.content.Intent)>
<com.android.contacts.ContactSaveService: void setSuperPrimary(android.content.Intent)>
<com.android.contacts.ContactSaveService: void updateGroup(android.content.Intent)>
<com.android.contacts.ContactsApplication: java.lang.Object getSystemService(java.lang.String)>
<com.android.contacts.ContactsUtils: android.graphics.Bitmap loadContactPhoto(android.content.Context,long,android.graphics.BitmapFactory$Options)>
<com.android.contacts.ContactsUtils: int getThumbnailSize(android.content.Context)>
<com.android.contacts.ContactsUtils: java.lang.String querySuperPrimaryPhone(android.content.ContentResolver,long)>
<com.android.contacts.ContactsUtils: java.util.ArrayList queryForAllRawContactIds(android.content.ContentResolver,long)>
<com.android.contacts.ContactsUtils: long queryForContactId(android.content.ContentResolver,long)>
<com.android.contacts.ContactsUtils: long queryForRawContactId(android.content.ContentResolver,long)>
<com.android.contacts.common.ContactPhotoManagerImpl$LoaderThread: void loadPhotosInBackground()>
<com.android.contacts.common.ContactPhotoManagerImpl$LoaderThread: void loadThumbnails(boolean)>
<com.android.contacts.common.ContactPhotoManagerImpl$LoaderThread: void preloadPhotosInBackground()>
<com.android.contacts.common.ContactPhotoManagerImpl$LoaderThread: void queryPhotosForPreload()>
<com.android.contacts.common.database.ContactUpdateUtils: void setSuperPrimary(android.content.Context,long)>
<com.android.contacts.common.dialog.ClearFrequentsDialog$1$1: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.contacts.common.dialog.ClearFrequentsDialog$1$1: java.lang.Void doInBackground(java.lang.Void[])>
<com.android.contacts.common.list.ContactEntryListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)>
<com.android.contacts.common.list.ContactEntryListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.common.list.ContactEntryListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.common.list.ContactEntryListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int)>
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)>
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)>
<com.android.contacts.common.list.ContactListAdapter: android.net.Uri getFirstContactUri()>
<com.android.contacts.common.list.ContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.common.list.ContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.common.list.ContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.common.list.ContactListFilterController$ContactListFilterListener: void onContactListFilterChanged()>
<com.android.contacts.common.list.ContactListFilterController: com.android.contacts.common.list.ContactListFilterController getInstance(android.content.Context)>
<com.android.contacts.common.list.ContactListFilterController: void checkFilterValidity(boolean)>
<com.android.contacts.common.list.ContactListFilterController: void selectCustomFilter()>
<com.android.contacts.common.list.ContactListFilterController: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean)>
<com.android.contacts.common.list.ContactListFilterControllerImpl: com.android.contacts.common.list.ContactListFilterController getInstance(android.content.Context)>
<com.android.contacts.common.list.ContactListFilterControllerImpl: void <init>(android.content.Context)>
<com.android.contacts.common.list.ContactListFilterControllerImpl: void checkFilterValidity(boolean)>
<com.android.contacts.common.list.ContactListFilterControllerImpl: void notifyContactListFilterChanged()>
<com.android.contacts.common.list.ContactListFilterControllerImpl: void selectCustomFilter()>
<com.android.contacts.common.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean)>
<com.android.contacts.common.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.common.list.ContactListFilter,boolean,boolean)>
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int)>
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)>
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)>
<com.android.contacts.common.list.DefaultContactListAdapter: android.net.Uri getFirstContactUri()>
<com.android.contacts.common.list.DefaultContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.common.list.DefaultContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.common.list.DefaultContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.common.list.DefaultContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)>
<com.android.contacts.common.list.DirectoryListLoader: android.database.Cursor loadInBackground()>
<com.android.contacts.common.list.DirectoryListLoader: java.lang.Object loadInBackground()>
<com.android.contacts.common.list.IndexerListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.common.list.IndexerListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.common.list.PhoneNumberListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)>
<com.android.contacts.common.list.PhoneNumberListAdapter: android.net.Uri getDataUri(int)>
<com.android.contacts.common.list.PhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.common.list.PhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.common.list.PhoneNumberListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.common.list.PhoneNumberListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)>
<com.android.contacts.common.list.PinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.common.list.PinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.common.list.PinnedHeaderListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)>
<com.android.contacts.common.list.ProfileAndContactsLoader: android.database.Cursor loadInBackground()>
<com.android.contacts.common.list.ProfileAndContactsLoader: android.database.MatrixCursor loadProfile()>
<com.android.contacts.common.list.ProfileAndContactsLoader: java.lang.Object loadInBackground()>
<com.android.contacts.common.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.contacts.common.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])>
<com.android.contacts.common.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: void loadPhoto()>
<com.android.contacts.common.list.ShortcutIntentBuilder$LoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.contacts.common.list.ShortcutIntentBuilder$LoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])>
<com.android.contacts.common.list.ShortcutIntentBuilder$LoadingAsyncTask: void loadPhoto()>
<com.android.contacts.common.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.contacts.common.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])>
<com.android.contacts.common.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: void loadPhoto()>
<com.android.contacts.common.model.AccountTypeManager: java.util.Map getUsableInvitableAccountTypes()>
<com.android.contacts.common.model.AccountTypeManagerImpl$FindInvitablesTask: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.contacts.common.model.AccountTypeManagerImpl$FindInvitablesTask: java.util.Map doInBackground(java.lang.Void[])>
<com.android.contacts.common.model.AccountTypeManagerImpl: java.util.Map findUsableInvitableAccountTypes(android.content.Context)>
<com.android.contacts.common.model.AccountTypeManagerImpl: java.util.Map getUsableInvitableAccountTypes()>
<com.android.contacts.common.model.account.AccountTypeWithDataSet: boolean hasData(android.content.Context)>
<com.android.contacts.common.model.account.AccountWithDataSet: boolean hasData(android.content.Context)>
<com.android.contacts.common.util.AccountFilterUtil: void handleAccountFilterResult(com.android.contacts.common.list.ContactListFilterController,int,android.content.Intent)>
<com.android.contacts.common.vcard.ImportProcessor: boolean readOneVCard(java.io.InputStream,int,java.lang.String,com.android.vcard.VCardInterpreter,int[])>
<com.android.contacts.common.vcard.ImportProcessor: void onEntryCreated(com.android.vcard.VCardEntry)>
<com.android.contacts.common.vcard.NotificationImportExportListener: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)>
<com.android.contacts.common.vcard.NotificationImportExportListener: void onImportParsed(com.android.contacts.common.vcard.ImportRequest,int,com.android.vcard.VCardEntry,int,int)>
<com.android.contacts.common.vcard.VCardImportExportListener: void onImportFinished(com.android.contacts.common.vcard.ImportRequest,int,android.net.Uri)>
<com.android.contacts.common.vcard.VCardImportExportListener: void onImportParsed(com.android.contacts.common.vcard.ImportRequest,int,com.android.vcard.VCardEntry,int,int)>
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)>
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)>
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)>
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)>
<com.android.contacts.common.widget.LayoutSuppressingQuickContactBadge: void onClick(android.view.View)>
<com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)>
<com.android.contacts.datepicker.DatePickerDialog: void onClick(android.content.DialogInterface,int)>
<com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag: android.net.Uri getStreamItemPhotoUri()>
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onPhotoSelected(android.graphics.Bitmap)>
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onRemovePictureChosen()>
<com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener: void onUseAsPrimaryChosen()>
<com.android.contacts.detail.PhotoSelectionHandler: boolean handlePhotoActivityResult(int,int,android.content.Intent)>
<com.android.contacts.detail.PhotoSelectionHandler: int getPhotoPickSize()>
<com.android.contacts.detail.PhotoSelectionHandler: void <init>(android.content.Context,android.view.View,int,boolean,com.android.contacts.model.EntityDeltaList)>
<com.android.contacts.detail.PhotoSelectionHandler: void <init>(android.content.Context,android.view.View,int,boolean,com.android.contacts.model.RawContactDeltaList)>
<com.android.contacts.dialog.ClearFrequentsDialog$1$1: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.contacts.dialog.ClearFrequentsDialog$1$1: java.lang.Void doInBackground(java.lang.Void[])>
<com.android.contacts.group.GroupBrowseListAdapter: android.net.Uri getGroupUriFromId(long)>
<com.android.contacts.group.GroupBrowseListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.group.GroupBrowseListAdapter: int getSelectedGroupPosition()>
<com.android.contacts.group.GroupBrowseListAdapter: void setCursor(android.database.Cursor)>
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMemberFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)>
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,android.database.Cursor)>
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,java.lang.Object)>
<com.android.contacts.list.ContactBrowseListContextMenuAdapter: boolean onContextItemSelected(android.view.MenuItem)>
<com.android.contacts.list.ContactEntryListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)>
<com.android.contacts.list.ContactEntryListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.ContactEntryListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.ContactEntryListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int)>
<com.android.contacts.list.ContactEntryListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int)>
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)>
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)>
<com.android.contacts.list.ContactListAdapter: android.net.Uri getFirstContactUri()>
<com.android.contacts.list.ContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.ContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.ContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int)>
<com.android.contacts.list.ContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.list.ContactListFilterController$ContactListFilterListener: void onContactListFilterChanged()>
<com.android.contacts.list.ContactListFilterController: com.android.contacts.list.ContactListFilterController createContactListFilterController(android.content.Context)>
<com.android.contacts.list.ContactListFilterController: void checkFilterValidity(boolean)>
<com.android.contacts.list.ContactListFilterController: void notifyContactListFilterChanged()>
<com.android.contacts.list.ContactListFilterController: void selectCustomFilter()>
<com.android.contacts.list.ContactListFilterController: void setContactListFilter(com.android.contacts.list.ContactListFilter,boolean)>
<com.android.contacts.list.ContactListFilterControllerImpl: com.android.contacts.list.ContactListFilterController createContactListFilterController(android.content.Context)>
<com.android.contacts.list.ContactListFilterControllerImpl: void <init>(android.content.Context)>
<com.android.contacts.list.ContactListFilterControllerImpl: void checkFilterValidity(boolean)>
<com.android.contacts.list.ContactListFilterControllerImpl: void notifyContactListFilterChanged()>
<com.android.contacts.list.ContactListFilterControllerImpl: void selectCustomFilter()>
<com.android.contacts.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.list.ContactListFilter,boolean)>
<com.android.contacts.list.ContactListFilterControllerImpl: void setContactListFilter(com.android.contacts.list.ContactListFilter,boolean,boolean)>
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getContactUri(int)>
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)>
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)>
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getFirstContactUri()>
<com.android.contacts.list.DefaultContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.DefaultContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.DefaultContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int)>
<com.android.contacts.list.DefaultContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.list.DefaultContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)>
<com.android.contacts.list.DirectoryListLoader: android.database.Cursor loadInBackground()>
<com.android.contacts.list.DirectoryListLoader: java.lang.Object loadInBackground()>
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)>
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getDataUri(int)>
<com.android.contacts.list.EmailAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.EmailAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.EmailAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.list.EmailAddressListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int)>
<com.android.contacts.list.EmailAddressListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int)>
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)>
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)>
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getFirstContactUri()>
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.JoinContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.list.JoinContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int)>
<com.android.contacts.list.JoinContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)>
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)>
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.LegacyContactListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.list.LegacyContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int)>
<com.android.contacts.list.LegacyContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)>
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getPhoneUri(int)>
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.LegacyPhoneNumberListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.list.LegacyPhoneNumberListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int)>
<com.android.contacts.list.LegacyPhoneNumberListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactMethodUri(int)>
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)>
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.LegacyPostalAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.list.LegacyPostalAddressListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int)>
<com.android.contacts.list.LegacyPostalAddressListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.list.OnContactBrowserActionListener: void onFinishAction()>
<com.android.contacts.list.OnContactBrowserActionListener: void onInvalidSelection()>
<com.android.contacts.list.OnPhoneNumberPickerActionListener: void onHomeInActionBarSelected()>
<com.android.contacts.list.PhoneFavoriteMergedAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.PhoneNumberListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)>
<com.android.contacts.list.PhoneNumberListAdapter: android.net.Uri getDataUri(int)>
<com.android.contacts.list.PhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.PhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.PhoneNumberListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int)>
<com.android.contacts.list.PhoneNumberListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.list.PhoneNumberListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)>
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)>
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getDataUri(int)>
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.PostalAddressListAdapter: void bindQuickContact(com.android.contacts.common.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.list.PostalAddressListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int)>
<com.android.contacts.list.PostalAddressListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor,int,int,int,int)>
<com.android.contacts.list.ProfileAndContactsLoader: android.database.Cursor loadInBackground()>
<com.android.contacts.list.ProfileAndContactsLoader: android.database.MatrixCursor loadProfile()>
<com.android.contacts.list.ProfileAndContactsLoader: java.lang.Object loadInBackground()>
<com.android.contacts.list.ProviderStatusLoader$ProviderStatusListener: void onProviderStatusChange()>
<com.android.contacts.list.ProviderStatusLoader: int getProviderStatus()>
<com.android.contacts.list.ProviderStatusLoader: java.lang.String getProviderStatusData()>
<com.android.contacts.list.ProviderStatusLoader: void loadProviderStatus()>
<com.android.contacts.list.ProviderStatusLoader: void retryUpgrade()>
<com.android.contacts.list.ProviderStatusWatcher$2: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.contacts.list.ProviderStatusWatcher$2: java.lang.Void doInBackground(java.lang.Void[])>
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: java.lang.Boolean doInBackground(java.lang.Void[])>
<com.android.contacts.list.ProviderStatusWatcher$LoaderTask: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])>
<com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: void loadPhoto()>
<com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])>
<com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask: void loadPhoto()>
<com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])>
<com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: void loadPhoto()>
<com.android.contacts.model.AccountTypeManager: java.util.Map getUsableInvitableAccountTypes()>
<com.android.contacts.model.AccountTypeManagerImpl$FindInvitablesTask: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.contacts.model.AccountTypeManagerImpl$FindInvitablesTask: java.util.Map doInBackground(java.lang.Void[])>
<com.android.contacts.model.AccountTypeManagerImpl: java.util.Map findUsableInvitableAccountTypes(android.content.Context)>
<com.android.contacts.model.AccountTypeManagerImpl: java.util.Map getUsableInvitableAccountTypes()>
<com.android.contacts.model.AccountTypeWithDataSet: boolean hasData(android.content.Context)>
<com.android.contacts.model.AccountWithDataSet: boolean hasData(android.content.Context)>
<com.android.contacts.model.ContactLoader: com.android.contacts.model.Contact loadInBackground()>
<com.android.contacts.model.ContactLoader: java.lang.Object loadInBackground()>
<com.android.contacts.model.ContactLoader: void loadDirectoryMetaData(com.android.contacts.model.Contact)>
<com.android.contacts.model.ContactLoader: void loadGroupMetaData(com.android.contacts.model.Contact)>
<com.android.contacts.model.ContactLoader: void loadInvitableAccountTypes(com.android.contacts.model.Contact)>
<com.android.contacts.model.ContactLoader: void loadStreamItems(com.android.contacts.model.Contact)>
<com.android.contacts.model.EntityDelta: android.content.ContentProviderOperation$Builder buildSetAggregationMode(java.lang.Long,int)>
<com.android.contacts.model.EntityDelta: void buildAssert(java.util.ArrayList)>
<com.android.contacts.model.EntityDelta: void buildDiff(java.util.ArrayList)>
<com.android.contacts.model.EntityDeltaList: android.content.ContentProviderOperation$Builder beginKeepTogether()>
<com.android.contacts.model.EntityDeltaList: java.util.ArrayList buildDiff()>
<com.android.contacts.model.EntityDeltaList: void buildSplitContactDiff(java.util.ArrayList,int,int,int[])>
<com.android.contacts.model.EntityDeltaList: void buildSplitContactDiff(java.util.ArrayList,int[])>
<com.android.contacts.model.EntityModifier: void migrateStateForNewContact(android.content.Context,com.android.contacts.model.EntityDelta,com.android.contacts.model.EntityDelta,com.android.contacts.model.AccountType,com.android.contacts.model.AccountType)>
<com.android.contacts.model.EntityModifier: void migrateStructuredName(android.content.Context,com.android.contacts.model.EntityDelta,com.android.contacts.model.EntityDelta,com.android.contacts.model.DataKind)>
<com.android.contacts.model.EntityModifier: void parseExtras(android.content.Context,com.android.contacts.model.AccountType,com.android.contacts.model.EntityDelta,android.os.Bundle)>
<com.android.contacts.model.EntityModifier: void parseStructuredNameExtra(android.content.Context,com.android.contacts.model.AccountType,com.android.contacts.model.EntityDelta,android.os.Bundle)>
<com.android.contacts.model.EntitySet: android.content.ContentProviderOperation$Builder beginKeepTogether()>
<com.android.contacts.model.EntitySet: com.android.contacts.model.EntitySet fromQuery(android.content.ContentResolver,java.lang.String,java.lang.String[],java.lang.String)>
<com.android.contacts.model.EntitySet: java.util.ArrayList buildDiff()>
<com.android.contacts.model.EntitySet: void buildSplitContactDiff(java.util.ArrayList,int,int,int[])>
<com.android.contacts.model.EntitySet: void buildSplitContactDiff(java.util.ArrayList,int[])>
<com.android.contacts.model.GoogleSource: void attemptMyContactsMembership(com.android.contacts.model.EntityDelta,android.content.Context)>
<com.android.contacts.model.GoogleSource: void attemptMyContactsMembership(com.android.contacts.model.EntityDelta,java.lang.String,java.lang.String,android.content.Context,boolean)>
<com.android.contacts.model.GoogleSource: void createMyContactsIfNotExist(android.accounts.Account,android.content.Context)>
<com.android.contacts.model.RawContactDelta: void buildDiff(java.util.ArrayList)>
<com.android.contacts.model.RawContactDeltaList: android.content.ContentProviderOperation$Builder beginKeepTogether()>
<com.android.contacts.model.RawContactDeltaList: java.util.ArrayList buildDiff()>
<com.android.contacts.model.RawContactDeltaList: void buildSplitContactDiff(java.util.ArrayList,int,int,int[])>
<com.android.contacts.model.RawContactDeltaList: void buildSplitContactDiff(java.util.ArrayList,int[])>
<com.android.contacts.model.RawContactModifier: void migrateStateForNewContact(android.content.Context,com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.account.AccountType,com.android.contacts.common.model.account.AccountType)>
<com.android.contacts.model.RawContactModifier: void migrateStructuredName(android.content.Context,com.android.contacts.model.RawContactDelta,com.android.contacts.model.RawContactDelta,com.android.contacts.common.model.dataitem.DataKind)>
<com.android.contacts.model.RawContactModifier: void parseExtras(android.content.Context,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDelta,android.os.Bundle)>
<com.android.contacts.model.RawContactModifier: void parseStructuredNameExtra(android.content.Context,com.android.contacts.common.model.account.AccountType,com.android.contacts.model.RawContactDelta,android.os.Bundle)>
<com.android.contacts.ui.QuickContactWindow: android.net.Uri getDataUri(android.net.Uri)>
<com.android.contacts.ui.QuickContactWindow: void show(android.net.Uri,android.graphics.Rect,int,java.lang.String[])>
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)>
<com.android.providers.contacts.ContactsProvider2$PipeMonitor: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.providers.contacts.ContactsProvider2: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: android.content.res.AssetFileDescriptor openAssetFileInner(android.net.Uri,java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: android.content.res.AssetFileDescriptor openAssetFileLocal(android.net.Uri,java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long,android.os.CancellationSignal)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryWithContactIdAndLookupKey(android.database.sqlite.SQLiteQueryBuilder,android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,java.lang.String,java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryWithContactIdAndLookupKey(android.database.sqlite.SQLiteQueryBuilder,android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<com.android.providers.contacts.ContactsProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues)>
<com.android.providers.contacts.ContactsProvider2: boolean importLegacyContacts(com.android.providers.contacts.LegacyContactImporter)>
<com.android.providers.contacts.ContactsProvider2: int deleteData(java.lang.String,java.lang.String[],boolean)>
<com.android.providers.contacts.ContactsProvider2: int deleteData(long,java.lang.String[])>
<com.android.providers.contacts.ContactsProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[])>
<com.android.providers.contacts.ContactsProvider2: int updateData(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)>
<com.android.providers.contacts.ContactsProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)>
<com.android.providers.contacts.ContactsProvider2: long insertSettings(android.net.Uri,android.content.ContentValues)>
<com.android.providers.contacts.ContactsProvider2: long insertStatusUpdate(android.content.ContentValues)>
<com.android.providers.contacts.ContactsProvider2: void cleanupPhotoStore()>
<com.android.providers.contacts.ContactsProvider2: void importLegacyContactsInBackground()>
<com.android.providers.contacts.ContactsProvider2: void outputRawContactsAsVCard(android.net.Uri,java.io.OutputStream,java.lang.String,java.lang.String[])>
<com.android.providers.contacts.ContactsProvider2: void outputRawContactsAsVCard(java.io.OutputStream,java.lang.String,java.lang.String[])>
<com.android.providers.contacts.ContactsProvider2: void performBackgroundTask(int,java.lang.Object)>
# uri
android.provider.Contacts: android.net.Uri CONTENT_URI
android.provider.ContactsContract.*: android.net.Uri CONTENT.*_URI
android.provider.ContactsContract.*: android.net.Uri ENTERPRISE_CONTENT_LOOKUP_URI
android.provider.ContactsContract.*: android.net.Uri PROFILE_CONTENT_URI
android.provider.ContactsContract.*: android.net.Uri AUTHORITY_URI
<android.provider.Contacts$Phones: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$AggregationExceptions: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$CommonDataKinds$Callable: android.net.Uri CONTENT_FILTER_URI>
<android.provider.ContactsContract$CommonDataKinds$Callable: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$CommonDataKinds$Contactables: android.net.Uri CONTENT_FILTER_URI>
<android.provider.ContactsContract$CommonDataKinds$Contactables: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$CommonDataKinds$Email: android.net.Uri CONTENT_FILTER_URI>
<android.provider.ContactsContract$CommonDataKinds$Email: android.net.Uri CONTENT_LOOKUP_URI>
<android.provider.ContactsContract$CommonDataKinds$Email: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$CommonDataKinds$Email: android.net.Uri ENTERPRISE_CONTENT_LOOKUP_URI>
<android.provider.ContactsContract$CommonDataKinds$Phone: android.net.Uri CONTENT_FILTER_URI>
<android.provider.ContactsContract$CommonDataKinds$Phone: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_FILTER_URI>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_FREQUENT_URI>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_GROUP_URI>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_LOOKUP_URI>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_MULTI_VCARD_URI>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_STREQUENT_FILTER_URI>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_STREQUENT_URI>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_VCARD_URI>
<android.provider.ContactsContract$Data: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$DataUsageFeedback: android.net.Uri DELETE_USAGE_URI>
<android.provider.ContactsContract$DataUsageFeedback: android.net.Uri FEEDBACK_URI>
<android.provider.ContactsContract$DeletedContacts: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$DisplayPhoto: android.net.Uri CONTENT_MAX_DIMENSIONS_URI>
<android.provider.ContactsContract$DisplayPhoto: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$Groups: android.net.Uri CONTENT_SUMMARY_URI>
<android.provider.ContactsContract$Groups: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$PhoneLookup: android.net.Uri CONTENT_FILTER_URI>
<android.provider.ContactsContract$PhoneLookup: android.net.Uri ENTERPRISE_CONTENT_FILTER_URI>
<android.provider.ContactsContract$Profile: android.net.Uri CONTENT_RAW_CONTACTS_URI>
<android.provider.ContactsContract$Profile: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$Profile: android.net.Uri CONTENT_VCARD_URI>
<android.provider.ContactsContract$ProfileSyncState: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$ProviderStatus: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$RawContacts: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$RawContactsEntity: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$RawContactsEntity: android.net.Uri PROFILE_CONTENT_URI>
<android.provider.ContactsContract$Settings: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$StatusUpdates: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract$StatusUpdates: android.net.Uri PROFILE_CONTENT_URI>
<android.provider.ContactsContract$SyncState: android.net.Uri CONTENT_URI>
<android.provider.ContactsContract: android.net.Uri AUTHORITY_URI>
<android.provider.Contacts$ContactMethods: android.net.Uri CONTENT_EMAIL_URI>
content://com.android.contacts
content://com.android.contacts/data/phones
content://com.android.contacts/data/emails
content://com.android.contacts/contacts
content://com.android.contacts/profile/data
content://contacts

