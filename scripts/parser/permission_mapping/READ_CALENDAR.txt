# api
<android.provider.Calendar$CalendarAlerts: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.provider.Calendar$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)>
<android.provider.Calendar$CalendarAlerts: boolean alarmExists(android.content.ContentResolver,long,long,long)>
<android.provider.Calendar$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)>
<android.provider.Calendar$CalendarAlerts: void rescheduleMissedAlarms(android.content.ContentResolver,android.content.Context,android.app.AlarmManager)>
<android.provider.Calendar$Calendars: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)>
<android.provider.Calendar$Calendars: int delete(android.content.ContentResolver,java.lang.String,java.lang.String[])>
<android.provider.Calendar$Calendars: int deleteCalendarsForAccount(android.content.ContentResolver,android.accounts.Account)>
<android.provider.Calendar$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int)>
<android.provider.Calendar$Events: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])>
<android.provider.Calendar$Events: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)>
<android.provider.Calendar$EventsEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>
<android.provider.Calendar$EventsEntity$EntityIteratorImpl: android.content.Entity next()>
<android.provider.Calendar$EventsEntity$EntityIteratorImpl: java.lang.Object next()>
<android.provider.Calendar$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)>
<android.provider.Calendar$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String,java.lang.String)>
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)>
<android.provider.CalendarContract$CalendarAlerts: boolean alarmExists(android.content.ContentResolver,long,long,long)>
<android.provider.CalendarContract$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)>
<android.provider.CalendarContract$CalendarAlerts: void rescheduleMissedAlarms(android.content.ContentResolver,android.content.Context,android.app.AlarmManager)>
<android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl: android.content.Entity next()>
<android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl: java.lang.Object next()>
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])>
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity next()>
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: java.lang.Object next()>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)>
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<android.provider.ContactsContract$Groups$EntityIteratorImpl: android.content.Entity next()>
<android.provider.ContactsContract$Groups$EntityIteratorImpl: java.lang.Object next()>
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: android.content.Entity next()>
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: java.lang.Object next()>
<com.android.calendar.CalendarActivity$2: void onReceive(android.content.Context,android.content.Intent)>
<com.android.calendar.CalendarActivity$3: void onChange(boolean)>
<com.android.calendar.CalendarActivity$CalendarGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<com.android.calendar.CalendarActivity$CalendarGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<com.android.calendar.CalendarActivity: android.view.View switchViews(boolean,float,float)>
<com.android.calendar.CalendarActivity: boolean onOptionsItemSelected(android.view.MenuItem)>
<com.android.calendar.CalendarActivity: void eventsChanged()>
<com.android.calendar.CalendarActivity: void goTo(android.text.format.Time,boolean)>
<com.android.calendar.CalendarActivity: void goToToday()>
<com.android.calendar.CalendarActivity: void onCreate(android.os.Bundle)>
<com.android.calendar.CalendarActivity: void onNewIntent(android.content.Intent)>
<com.android.calendar.CalendarActivity: void onRestoreInstanceState(android.os.Bundle)>
<com.android.calendar.CalendarActivity: void onResume()>
<com.android.calendar.CalendarColorPickerDialog$OnCalendarColorSelectedListener: void onColorSelected(int)>
<com.android.calendar.CalendarColorPickerDialog$QueryService: void onQueryComplete(int,java.lang.Object,android.database.Cursor)>
<com.android.calendar.CalendarColorPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.calendar.CalendarColorPickerDialog: com.android.calendar.CalendarColorPickerDialog newInstance(long,boolean)>
<com.android.calendar.CalendarColorPickerDialog: void onColorSelected(int)>
<com.android.calendar.CalendarColorPickerDialog: void setCalendarId(long)>
<com.android.calendar.CalendarColorPickerDialog: void startQuery()>
<com.android.calendar.CalendarController$EventHandler: void eventsChanged()>
<com.android.calendar.CalendarController$EventHandler: void handleEvent(com.android.calendar.CalendarController$EventInfo)>
<com.android.calendar.CalendarController: void launchDeleteEvent(long,long,long)>
<com.android.calendar.CalendarController: void launchDeleteEventAndFinish(android.app.Activity,long,long,long,int)>
<com.android.calendar.CalendarController: void refreshCalendars()>
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,com.android.calendar.CalendarController$EventInfo)>
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)>
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int)>
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)>
<com.android.calendar.CalendarController: void sendEventRelatedEvent(java.lang.Object,long,long,long,long,int,int,long)>
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtra(java.lang.Object,long,long,long,long,int,int,long,long)>
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtraWithTitleWithCalendarId(java.lang.Object,long,long,long,long,int,int,long,long,java.lang.String,long)>
<com.android.calendar.CalendarPreferenceActivity: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>
<com.android.calendar.CalendarPreferenceActivity: void onCreate(android.os.Bundle)>
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String formatDateRange(android.content.Context,long,long,int)>
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)>
<com.android.calendar.CalendarUtils$TimeZoneUtils: void forceDBRequery(android.content.Context,java.lang.Runnable)>
<com.android.calendar.CalendarUtils$TimeZoneUtils: void setTimeZone(android.content.Context,java.lang.String)>
<com.android.calendar.CalendarView$ContextMenuHandler: boolean onMenuItemClick(android.view.MenuItem)>
<com.android.calendar.CalendarView: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<com.android.calendar.CalendarView: boolean onKeyDown(int,android.view.KeyEvent)>
<com.android.calendar.CalendarView: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.calendar.CalendarView: int getEventAccessLevel(android.content.Context,com.android.calendar.Event)>
<com.android.calendar.CalendarView: void doFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<com.android.calendar.CalendarView: void doScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<com.android.calendar.CalendarView: void drawAfterScroll(android.graphics.Canvas)>
<com.android.calendar.CalendarView: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
<com.android.calendar.CalendarView: void onDraw(android.graphics.Canvas)>
<com.android.calendar.CalendarView: void recalc()>
<com.android.calendar.CalendarView: void reloadEvents()>
<com.android.calendar.CalendarView: void setSelectedDay(android.text.format.Time)>
<com.android.calendar.CalendarView: void updateEventDetails()>
<com.android.calendar.CalendarViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.calendar.CalendarViewAdapter: java.lang.String buildWeekNum()>
<com.android.calendar.CalendarViewAdapter: void refresh(android.content.Context)>
<com.android.providers.calendar.CalendarProvider2: android.accounts.Account getAccount(long)>
<com.android.providers.calendar.CalendarProvider2: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
<com.android.providers.calendar.CalendarProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.providers.calendar.CalendarProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues)>
<com.android.providers.calendar.CalendarProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues,boolean)>
<com.android.providers.calendar.CalendarProvider2: boolean fixAllDayTime(android.net.Uri,android.content.ContentValues)>
<com.android.providers.calendar.CalendarProvider2: int deleteFromEventRelatedTable(java.lang.String,android.net.Uri,java.lang.String,java.lang.String[])>
<com.android.providers.calendar.CalendarProvider2: int deleteFromTable(java.lang.String,android.net.Uri,java.lang.String,java.lang.String[])>
<com.android.providers.calendar.CalendarProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[])>
<com.android.providers.calendar.CalendarProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[],boolean)>
<com.android.providers.calendar.CalendarProvider2: int deleteMatchingCalendars(java.lang.String)>
<com.android.providers.calendar.CalendarProvider2: int deleteMatchingCalendars(java.lang.String,java.lang.String[])>
<com.android.providers.calendar.CalendarProvider2: int deleteMatchingColors(java.lang.String,java.lang.String[])>
<com.android.providers.calendar.CalendarProvider2: int deleteReminders(android.net.Uri,boolean,java.lang.String,java.lang.String[],boolean)>
<com.android.providers.calendar.CalendarProvider2: int updateEventRelatedTable(android.net.Uri,java.lang.String,boolean,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)>
<com.android.providers.calendar.CalendarProvider2: int updateInTable(java.lang.String,android.content.ContentValues,android.net.Uri,java.lang.String,java.lang.String[])>
<com.android.providers.calendar.CalendarProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<com.android.providers.calendar.CalendarProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)>
<com.android.providers.calendar.CalendarProvider2: java.lang.String getOriginalSyncId(long)>
<com.android.providers.calendar.CalendarProvider2: java.lang.String getOwner(long)>
<com.android.providers.calendar.CalendarProvider2: long getOriginalId(java.lang.String)>
<com.android.providers.calendar.CalendarProvider2: long getOriginalId(java.lang.String,java.lang.String)>
<com.android.providers.calendar.CalendarProvider2: long handleInsertException(long,android.content.ContentValues,boolean)>
<com.android.providers.calendar.CalendarProvider2: void doProcessEventRawTimes(java.lang.String,java.lang.String)>
<com.android.providers.calendar.CalendarProvider2: void doUpdateTimezoneDependentFields()>
<com.android.providers.calendar.CalendarProvider2: void modifyCalendarSubscription(long,boolean)>
<com.android.providers.calendar.CalendarProvider2: void regenerateInstancesTable()>
<com.android.providers.calendar.CalendarProvider2: void rescheduleMissedAlarms()>
<com.android.providers.calendar.CalendarProvider2: void runScheduleNextAlarm(boolean)>
<com.android.providers.calendar.CalendarProvider2: void scheduleNextAlarmLocked(android.database.sqlite.SQLiteDatabase)>
<com.android.providers.calendar.CalendarProvider2: void updateEventAttendeeStatus(android.database.sqlite.SQLiteDatabase,android.content.ContentValues)>
<com.android.providers.calendar.CalendarProviderIntentService: void onHandleIntent(android.content.Intent)>
<com.android.providers.calendar.CalendarReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.providers.calendar.CalendarReceiver: void removeScheduledAlarms(android.content.ContentResolver)>
<com.android.providers.calendar.CalendarReceiver: void removeScheduledAlarms(android.content.Context,android.content.ContentResolver)>
# uri
content://com.android.calendar/calendars
content://com.android.calendar/events
<android.provider.CalendarContract$Events: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract$Attendees: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract$CalendarAlerts: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract$CalendarEntity: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract$Calendars: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract$Colors: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract$EventDays: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract$Events: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract$EventsEntity: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract$ExtendedProperties: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract$Instances: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract$Reminders: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract$SyncState: android.net.Uri CONTENT_URI>
<android.provider.CalendarContract: android.net.Uri CONTENT_URI>
